// Buttons Library
// Nathan Fusselman

//-----------------------------------------------------------------------------
// Hardware Target
//-----------------------------------------------------------------------------

// Target Platform: EK-TM4C123GXL
// Target uC:       TM4C123GH6PM
// System Clock:    -

// Hardware configuration:
// Buttons Module

//-----------------------------------------------------------------------------
// Device includes, defines, and assembler directives
//-----------------------------------------------------------------------------

#include <stdint.h>
#include <stdbool.h>
#include "gpio.h"
#include "wait.h"
#include "buttons.h"
#include "tm4c123gh6pm.h"

#define Button1 PORTE,0
#define Button2 PORTE,1
#define Button3 PORTE,2
#define Button4 PORTE,3
#define Button5 PORTE,4
#define Button6 PORTE,5

//-----------------------------------------------------------------------------
// Global variables
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
// Subroutines
//-----------------------------------------------------------------------------

// Initialize Display
void initButtons()
{
    // Enable clocks
    enablePort(PORTE);

    // Configure Input pins
    selectPinDigitalInput(Button1);
    selectPinDigitalInput(Button2);
    selectPinDigitalInput(Button3);
    selectPinDigitalInput(Button4);
    selectPinDigitalInput(Button5);
    selectPinDigitalInput(Button6);
}

void enableAllListen()
{
    uint8_t i;
    for (i = 1; i <= 6; i++)
        enableListen(i);
}

void disableAllListen()
{
    uint8_t i;
    for (i = 1; i <= 6; i++)
        enableListen(i);
}

void enableListen(uint8_t num)
{
    switch (num)
    {
    case 1:
        void enablePinInterrupt(Button1);
        void selectPinInterruptRisingEdge(Button1);
        break;
    case 2:
        void enablePinInterrupt(Button2);
        void selectPinInterruptRisingEdge(Button2);
        break;
    case 3:
        void enablePinInterrupt(Button3);
        void selectPinInterruptRisingEdge(Button3);
        break;
    case 4:
        void enablePinInterrupt(Button4);
        void selectPinInterruptRisingEdge(Button4);
        break;
    case 5:
        void enablePinInterrupt(Button5);
        void selectPinInterruptRisingEdge(Button5);
        break;
    case 6:
        void enablePinInterrupt(Button6);
        void selectPinInterruptRisingEdge(Button6);
        break;
    }
}

void disableListen(uint8_t num)
{
    switch (num)
    {
    case 1:
        disablePinInterrupt(Button1);
        break;
    case 2:
        disablePinInterrupt(Button2);
        break;
    case 3:
        disablePinInterrupt(Button3);
        break;
    case 4:
        disablePinInterrupt(Button4);
        break;
    case 5:
        disablePinInterrupt(Button5);
        break;
    case 6:
        disablePinInterrupt(Button6);
        break;
    }
}

uint8_t getButtonPressed()
{
    uint8_t num = -1;
}
